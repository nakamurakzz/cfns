AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for MySQL RDS instance with multi-AZ, RDS Proxy, VPC, Subnets, and a Bastion Host with EIP.'

Parameters:
  EnvironmentName:
    Description: The environment name (dev/stg/prd)
    Type: String
    AllowedValues:
      - dev
      - stg
      - prd

  DBName:
    Description: The database name
    Type: String

  DBUser:
    Description: The database admin account username
    Type: String

  DBPassword:
    Description: The password for the database admin account
    Type: String
    NoEcho: true
    MinLength: 8
    ConstraintDescription: Must be at least 8 characters long.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the Bastion Host
    Type: AWS::EC2::KeyPair::KeyName
  
  EC2ImageId:
    Description: AMI Id of Bastion host
    Type: String
    Default: ami-052c9af0c988f8bbd

  VpcCidr:
    Description: CIDR block for the VPC
    Type: String
    Default: '10.0.0.0/16'

  PublicSubnetCidr:
    Description: CIDR block for the public subnet
    Type: String
    Default: '10.0.0.0/24'

  PrivateSubnet1Cidr:
    Description: CIDR block for the first private subnet
    Type: String
    Default: '10.0.1.0/24'

  PrivateSubnet2Cidr:
    Description: CIDR block for the second private subnet
    Type: String
    Default: '10.0.2.0/24'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-VPC-${AWS::StackName}"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-InternetGateway-${AWS::StackName}"

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-PublicSubnet-${AWS::StackName}"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-PrivateSubnet1-${AWS::StackName}"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-PrivateSubnet2-${AWS::StackName}"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-PublicRouteTable-${AWS::StackName}"

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      ImageId: !Ref EC2ImageId # This is an Amazon Linux 2 LTS AMI ID; replace with the appropriate AMI ID for your region

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref BastionHost

  MySQLRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: mysql
      MultiAZ: true
      DBName: !Ref DBName
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 7

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable database access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 11.0.0.0/16
        # Add the following ingress rule to allow connections from the EC2SecurityGroup
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-RDSSecurityGroup-${AWS::StackName}"

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instance
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  RDSProxy:
    Type: AWS::RDS::DBProxy
    Properties:
      DBProxyName: 'MySQLRDSProxy'
      EngineFamily: MYSQL
      RoleArn: !GetAtt RDSProxyRole.Arn
      VpcSecurityGroupIds:
        - !Ref RDSSecurityGroup
      VpcSubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Auth:
        - AuthScheme: SECRETS
          IAMAuth: DISABLED
          SecretArn: !Ref RDSSecret

  RDSProxyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'rds.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonRDSDataFullAccess'
        - 'arn:aws:iam::aws:policy/SecretsManagerReadWrite'

  RDSProxyTargetGroup:
    Type: AWS::RDS::DBProxyTargetGroup
    DependsOn:
      - MySQLRDSInstance
    Properties:
      TargetGroupName: default
      DBInstanceIdentifiers:
        - !Ref MySQLRDSInstance
      ConnectionPoolConfigurationInfo:
        MaxConnectionsPercent: 20
      DBProxyName: !Ref RDSProxy

  RDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: 'RDSInstanceSecret'
      SecretString: !Sub '{"username":"${DBUser}", "password":"${DBPassword}"}'

Outputs:
  VPCId:
    Description: The VPC ID
    Value: !Ref VPC

  PublicSubnetId:
    Description: The `PublicSubnet` ID
    Value: !Ref PublicSubnet

  PrivateSubnet1Id:
    Description: The PrivateSubnet1 ID
    Value: !Ref PrivateSubnet1

  PrivateSubnet2Id:
    Description: The PrivateSubnet2 ID
    Value: !Ref PrivateSubnet2

  RDSInstanceEndpoint:
    Description: The RDS instance endpoint
    Value: !GetAtt MySQLRDSInstance.Endpoint.Address

  RDSProxyEndpoint:
    Description: The RDS proxy endpoint
    Value: !GetAtt RDSProxy.Endpoint

  BastionHostPublicIP:
    Description: The Elastic IP address for the Bastion Host
    Value: !Ref EIP
